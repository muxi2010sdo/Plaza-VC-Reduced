// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220608.4

#pragma once
#ifndef WINRT_VirtualCameraManager_WinRT_0_H
#define WINRT_VirtualCameraManager_WinRT_0_H
WINRT_EXPORT namespace winrt::Windows::Media::Devices
{
    struct VideoDeviceController;
}
WINRT_EXPORT namespace winrt::VirtualCameraManager_WinRT
{
    enum class AugmentedMediaSourceCustomControlKind : int32_t
    {
        KSPROPERTY_AUGMENTEDMEDIASOURCE_CUSTOMCONTROL_CUSTOMFX = 0,
    };
    enum class AugmentedMediaSourceCustomFxFlagKind : int32_t
    {
        Off = 0,
        Auto = 1,
    };
    enum class ColorModeKind : int32_t
    {
        Grayscale = 16777215,
        Red = 16711680,
        Green = 65280,
        Blue = 255,
    };
    enum class SimpleCustomControlKind : int32_t
    {
        Coloring = 0,
    };
    enum class VirtualCameraAccess : int32_t
    {
        CurrentUser = 0,
    };
    enum class VirtualCameraKind : int32_t
    {
        Synthetic = 0,
        CameraWrapper = 1,
        AugmentedCameraWrapper = 2,
    };
    enum class VirtualCameraLifetime : int32_t
    {
        Session = 0,
        System = 1,
    };
    struct IAugmentedMediaSourceCustomPropertyPayload;
    struct ICustomCameraKsPropertyInquiry;
    struct ICustomCameraKsPropertyInquiryStatics;
    struct IPropertyPayload;
    struct ISimpleCustomPropertyPayload;
    struct IVirtualCameraProxy;
    struct IVirtualCameraProxyFactory;
    struct IVirtualCameraRegistrar;
    struct IVirtualCameraRegistrarStatics;
    struct BasicAugmentedMediaSourceCustomPropertyPayload;
    struct CustomCameraKsPropertyInquiry;
    struct SimpleCustomPropertyPayload;
    struct VirtualCameraProxy;
    struct VirtualCameraRegistrar;
}
namespace winrt::impl
{
    template <> struct category<winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::IPropertyPayload>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxyFactory>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics>{ using type = interface_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::BasicAugmentedMediaSourceCustomPropertyPayload>{ using type = class_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::CustomCameraKsPropertyInquiry>{ using type = class_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::SimpleCustomPropertyPayload>{ using type = class_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::VirtualCameraProxy>{ using type = class_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::VirtualCameraRegistrar>{ using type = class_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind>{ using type = enum_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomFxFlagKind>{ using type = enum_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::ColorModeKind>{ using type = enum_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind>{ using type = enum_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::VirtualCameraAccess>{ using type = enum_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::VirtualCameraKind>{ using type = enum_category; };
    template <> struct category<winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::BasicAugmentedMediaSourceCustomPropertyPayload> = L"VirtualCameraManager_WinRT.BasicAugmentedMediaSourceCustomPropertyPayload";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::CustomCameraKsPropertyInquiry> = L"VirtualCameraManager_WinRT.CustomCameraKsPropertyInquiry";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::SimpleCustomPropertyPayload> = L"VirtualCameraManager_WinRT.SimpleCustomPropertyPayload";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::VirtualCameraProxy> = L"VirtualCameraManager_WinRT.VirtualCameraProxy";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::VirtualCameraRegistrar> = L"VirtualCameraManager_WinRT.VirtualCameraRegistrar";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind> = L"VirtualCameraManager_WinRT.AugmentedMediaSourceCustomControlKind";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomFxFlagKind> = L"VirtualCameraManager_WinRT.AugmentedMediaSourceCustomFxFlagKind";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::ColorModeKind> = L"VirtualCameraManager_WinRT.ColorModeKind";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind> = L"VirtualCameraManager_WinRT.SimpleCustomControlKind";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::VirtualCameraAccess> = L"VirtualCameraManager_WinRT.VirtualCameraAccess";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::VirtualCameraKind> = L"VirtualCameraManager_WinRT.VirtualCameraKind";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime> = L"VirtualCameraManager_WinRT.VirtualCameraLifetime";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload> = L"VirtualCameraManager_WinRT.IAugmentedMediaSourceCustomPropertyPayload";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry> = L"VirtualCameraManager_WinRT.ICustomCameraKsPropertyInquiry";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics> = L"VirtualCameraManager_WinRT.ICustomCameraKsPropertyInquiryStatics";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::IPropertyPayload> = L"VirtualCameraManager_WinRT.IPropertyPayload";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload> = L"VirtualCameraManager_WinRT.ISimpleCustomPropertyPayload";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy> = L"VirtualCameraManager_WinRT.IVirtualCameraProxy";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxyFactory> = L"VirtualCameraManager_WinRT.IVirtualCameraProxyFactory";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar> = L"VirtualCameraManager_WinRT.IVirtualCameraRegistrar";
    template <> inline constexpr auto& name_v<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics> = L"VirtualCameraManager_WinRT.IVirtualCameraRegistrarStatics";
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload>{ 0xD3F226A1,0x28BB,0x59A2,{ 0x9C,0xCA,0xA3,0x94,0x59,0x19,0xD6,0xA7 } }; // D3F226A1-28BB-59A2-9CCA-A3945919D6A7
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry>{ 0x357965C1,0x808F,0x5DF0,{ 0xA4,0xB9,0x0B,0x1D,0x62,0x2D,0x15,0x6C } }; // 357965C1-808F-5DF0-A4B9-0B1D622D156C
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics>{ 0x5FAAF30E,0x6C77,0x5296,{ 0xBA,0xFB,0xB7,0x26,0x4D,0x57,0x89,0xDE } }; // 5FAAF30E-6C77-5296-BAFB-B7264D5789DE
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::IPropertyPayload>{ 0x63703093,0x840C,0x593B,{ 0xA7,0x6A,0x36,0x16,0xCD,0xA2,0x78,0x16 } }; // 63703093-840C-593B-A76A-3616CDA27816
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload>{ 0xE1F77331,0xAFC7,0x5047,{ 0xB7,0xB0,0x3A,0xCB,0xAC,0xB9,0xE2,0xC9 } }; // E1F77331-AFC7-5047-B7B0-3ACBACB9E2C9
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy>{ 0x73932519,0x71B3,0x5B92,{ 0x80,0x17,0x2E,0x11,0xF7,0x19,0x78,0xDA } }; // 73932519-71B3-5B92-8017-2E11F71978DA
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxyFactory>{ 0x22FAFEFE,0x39C2,0x58A1,{ 0x9B,0x85,0x9D,0x73,0x69,0xF7,0x4E,0x94 } }; // 22FAFEFE-39C2-58A1-9B85-9D7369F74E94
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar>{ 0x23C9B684,0xAB9D,0x5E6E,{ 0x95,0x9A,0x6B,0x59,0xDE,0x9B,0xDC,0xA5 } }; // 23C9B684-AB9D-5E6E-959A-6B59DE9BDCA5
    template <> inline constexpr guid guid_v<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics>{ 0xE45722AE,0x89E8,0x5BA7,{ 0xB8,0xF8,0x05,0x41,0x2C,0x6E,0x9E,0xA4 } }; // E45722AE-89E8-5BA7-B8F8-05412C6E9EA4
    template <> struct default_interface<winrt::VirtualCameraManager_WinRT::BasicAugmentedMediaSourceCustomPropertyPayload>{ using type = winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload; };
    template <> struct default_interface<winrt::VirtualCameraManager_WinRT::CustomCameraKsPropertyInquiry>{ using type = winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry; };
    template <> struct default_interface<winrt::VirtualCameraManager_WinRT::SimpleCustomPropertyPayload>{ using type = winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload; };
    template <> struct default_interface<winrt::VirtualCameraManager_WinRT::VirtualCameraProxy>{ using type = winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy; };
    template <> struct default_interface<winrt::VirtualCameraManager_WinRT::VirtualCameraRegistrar>{ using type = winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar; };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ControlKind(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetSimpleCustomControl(int32_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetSimpleCustomControlFlags(int32_t, void*, uint32_t) noexcept = 0;
            virtual int32_t __stdcall GetAugmentedMediaSourceCustomControl(int32_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAugmentedMediaSourceCustomControlFlags(int32_t, void*, uint64_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::IPropertyPayload>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Capability(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_Flags(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_Size(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ControlKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ColorMode(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall EnableVirtualCamera() noexcept = 0;
            virtual int32_t __stdcall DisableVirtualCamera() noexcept = 0;
            virtual int32_t __stdcall RemoveVirtualCamera() noexcept = 0;
            virtual int32_t __stdcall get_Access(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_FriendlyName(void**) noexcept = 0;
            virtual int32_t __stdcall get_WrappedCameraSymbolicLink(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsKnownInstance(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Lifetime(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SymbolicLink(void**) noexcept = 0;
            virtual int32_t __stdcall get_VirtualCameraKind(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxyFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall RegisterNewVirtualCamera(int32_t, int32_t, int32_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RetakeExistingVirtualCamera(int32_t, int32_t, int32_t, void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetExistingVirtualCameraDevices(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_IAugmentedMediaSourceCustomPropertyPayload
    {
        [[nodiscard]] auto ControlKind() const;
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_IAugmentedMediaSourceCustomPropertyPayload<D>;
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_ICustomCameraKsPropertyInquiry
    {
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_ICustomCameraKsPropertyInquiry<D>;
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_ICustomCameraKsPropertyInquiryStatics
    {
        auto GetSimpleCustomControl(winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const& customControlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller) const;
        auto SetSimpleCustomControlFlags(winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const& customControlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller, uint32_t flags) const;
        auto GetAugmentedMediaSourceCustomControl(winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const& controlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller) const;
        auto SetAugmentedMediaSourceCustomControlFlags(winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const& controlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller, uint64_t flags) const;
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_ICustomCameraKsPropertyInquiryStatics<D>;
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_IPropertyPayload
    {
        [[nodiscard]] auto Capability() const;
        [[nodiscard]] auto Flags() const;
        [[nodiscard]] auto Size() const;
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::IPropertyPayload>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_IPropertyPayload<D>;
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_ISimpleCustomPropertyPayload
    {
        [[nodiscard]] auto ControlKind() const;
        [[nodiscard]] auto ColorMode() const;
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_ISimpleCustomPropertyPayload<D>;
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_IVirtualCameraProxy
    {
        auto EnableVirtualCamera() const;
        auto DisableVirtualCamera() const;
        auto RemoveVirtualCamera() const;
        [[nodiscard]] auto Access() const;
        [[nodiscard]] auto FriendlyName() const;
        [[nodiscard]] auto WrappedCameraSymbolicLink() const;
        [[nodiscard]] auto IsKnownInstance() const;
        [[nodiscard]] auto Lifetime() const;
        [[nodiscard]] auto SymbolicLink() const;
        [[nodiscard]] auto VirtualCameraKind() const;
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>;
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_IVirtualCameraProxyFactory
    {
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxyFactory>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_IVirtualCameraProxyFactory<D>;
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_IVirtualCameraRegistrar
    {
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_IVirtualCameraRegistrar<D>;
    };
    template <typename D>
    struct consume_VirtualCameraManager_WinRT_IVirtualCameraRegistrarStatics
    {
        auto RegisterNewVirtualCamera(winrt::VirtualCameraManager_WinRT::VirtualCameraKind const& virtualCameraKind, winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime const& lifetime, winrt::VirtualCameraManager_WinRT::VirtualCameraAccess const& access, param::hstring const& friendlyName, param::hstring const& wrappedCameraSymbolicLink) const;
        auto RetakeExistingVirtualCamera(winrt::VirtualCameraManager_WinRT::VirtualCameraKind const& virtualCameraKind, winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime const& lifetime, winrt::VirtualCameraManager_WinRT::VirtualCameraAccess const& access, param::hstring const& friendlyName, param::hstring const& symbolicLink, param::hstring const& wrappedCameraSymbolicLink) const;
        auto GetExistingVirtualCameraDevices() const;
    };
    template <> struct consume<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics>
    {
        template <typename D> using type = consume_VirtualCameraManager_WinRT_IVirtualCameraRegistrarStatics<D>;
    };
}
#endif
