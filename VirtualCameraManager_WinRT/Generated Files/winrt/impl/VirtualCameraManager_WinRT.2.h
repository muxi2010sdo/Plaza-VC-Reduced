// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220608.4

#pragma once
#ifndef WINRT_VirtualCameraManager_WinRT_2_H
#define WINRT_VirtualCameraManager_WinRT_2_H
#include "winrt/impl/Windows.Devices.Enumeration.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Media.Devices.1.h"
#include "winrt/impl/VirtualCameraManager_WinRT.1.h"
WINRT_EXPORT namespace winrt::VirtualCameraManager_WinRT
{
    struct __declspec(empty_bases) BasicAugmentedMediaSourceCustomPropertyPayload : winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload
    {
        BasicAugmentedMediaSourceCustomPropertyPayload(std::nullptr_t) noexcept {}
        BasicAugmentedMediaSourceCustomPropertyPayload(void* ptr, take_ownership_from_abi_t) noexcept : winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) CustomCameraKsPropertyInquiry : winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry
    {
        CustomCameraKsPropertyInquiry(std::nullptr_t) noexcept {}
        CustomCameraKsPropertyInquiry(void* ptr, take_ownership_from_abi_t) noexcept : winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry(ptr, take_ownership_from_abi) {}
        static winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload GetSimpleCustomControl(winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const& customControlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller);
        static void SetSimpleCustomControlFlags(winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const& customControlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller, uint32_t flags);
        static winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload GetAugmentedMediaSourceCustomControl(winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const& controlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller);
        static void SetAugmentedMediaSourceCustomControlFlags(winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const& controlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller, uint64_t flags);
    };
    struct __declspec(empty_bases) SimpleCustomPropertyPayload : winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload
    {
        SimpleCustomPropertyPayload(std::nullptr_t) noexcept {}
        SimpleCustomPropertyPayload(void* ptr, take_ownership_from_abi_t) noexcept : winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) VirtualCameraProxy : winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy
    {
        VirtualCameraProxy(std::nullptr_t) noexcept {}
        VirtualCameraProxy(void* ptr, take_ownership_from_abi_t) noexcept : winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) VirtualCameraRegistrar : winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar
    {
        VirtualCameraRegistrar(std::nullptr_t) noexcept {}
        VirtualCameraRegistrar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar(ptr, take_ownership_from_abi) {}
        static winrt::VirtualCameraManager_WinRT::VirtualCameraProxy RegisterNewVirtualCamera(winrt::VirtualCameraManager_WinRT::VirtualCameraKind const& virtualCameraKind, winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime const& lifetime, winrt::VirtualCameraManager_WinRT::VirtualCameraAccess const& access, param::hstring const& friendlyName, param::hstring const& wrappedCameraSymbolicLink);
        static winrt::VirtualCameraManager_WinRT::VirtualCameraProxy RetakeExistingVirtualCamera(winrt::VirtualCameraManager_WinRT::VirtualCameraKind const& virtualCameraKind, winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime const& lifetime, winrt::VirtualCameraManager_WinRT::VirtualCameraAccess const& access, param::hstring const& friendlyName, param::hstring const& symbolicLink, param::hstring const& wrappedCameraSymbolicLink);
        static winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Enumeration::DeviceInformation> GetExistingVirtualCameraDevices();
    };
}
#endif
