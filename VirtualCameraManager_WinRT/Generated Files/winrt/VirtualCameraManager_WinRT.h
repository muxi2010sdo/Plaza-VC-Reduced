// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220608.4

#pragma once
#ifndef WINRT_VirtualCameraManager_WinRT_H
#define WINRT_VirtualCameraManager_WinRT_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220608.4"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220608.4"
#include "winrt/impl/Windows.Devices.Enumeration.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Media.Devices.2.h"
#include "winrt/impl/VirtualCameraManager_WinRT.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_VirtualCameraManager_WinRT_IAugmentedMediaSourceCustomPropertyPayload<D>::ControlKind() const
    {
        winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload)->get_ControlKind(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_ICustomCameraKsPropertyInquiryStatics<D>::GetSimpleCustomControl(winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const& customControlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics)->GetSimpleCustomControl(static_cast<int32_t>(customControlKind), *(void**)(&controller), &result));
        return winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_ICustomCameraKsPropertyInquiryStatics<D>::SetSimpleCustomControlFlags(winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const& customControlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller, uint32_t flags) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics)->SetSimpleCustomControlFlags(static_cast<int32_t>(customControlKind), *(void**)(&controller), flags));
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_ICustomCameraKsPropertyInquiryStatics<D>::GetAugmentedMediaSourceCustomControl(winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const& controlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics)->GetAugmentedMediaSourceCustomControl(static_cast<int32_t>(controlKind), *(void**)(&controller), &result));
        return winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_ICustomCameraKsPropertyInquiryStatics<D>::SetAugmentedMediaSourceCustomControlFlags(winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const& controlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller, uint64_t flags) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics)->SetAugmentedMediaSourceCustomControlFlags(static_cast<int32_t>(controlKind), *(void**)(&controller), flags));
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IPropertyPayload<D>::Capability() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IPropertyPayload)->get_Capability(&value));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IPropertyPayload<D>::Flags() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IPropertyPayload)->get_Flags(&value));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IPropertyPayload<D>::Size() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IPropertyPayload)->get_Size(&value));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_ISimpleCustomPropertyPayload<D>::ControlKind() const
    {
        winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload)->get_ControlKind(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_ISimpleCustomPropertyPayload<D>::ColorMode() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload)->get_ColorMode(&value));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::EnableVirtualCamera() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->EnableVirtualCamera());
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::DisableVirtualCamera() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->DisableVirtualCamera());
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::RemoveVirtualCamera() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->RemoveVirtualCamera());
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::Access() const
    {
        winrt::VirtualCameraManager_WinRT::VirtualCameraAccess value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->get_Access(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::FriendlyName() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->get_FriendlyName(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::WrappedCameraSymbolicLink() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->get_WrappedCameraSymbolicLink(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::IsKnownInstance() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->get_IsKnownInstance(&value));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::Lifetime() const
    {
        winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->get_Lifetime(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::SymbolicLink() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->get_SymbolicLink(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraProxy<D>::VirtualCameraKind() const
    {
        winrt::VirtualCameraManager_WinRT::VirtualCameraKind value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy)->get_VirtualCameraKind(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraRegistrarStatics<D>::RegisterNewVirtualCamera(winrt::VirtualCameraManager_WinRT::VirtualCameraKind const& virtualCameraKind, winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime const& lifetime, winrt::VirtualCameraManager_WinRT::VirtualCameraAccess const& access, param::hstring const& friendlyName, param::hstring const& wrappedCameraSymbolicLink) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics)->RegisterNewVirtualCamera(static_cast<int32_t>(virtualCameraKind), static_cast<int32_t>(lifetime), static_cast<int32_t>(access), *(void**)(&friendlyName), *(void**)(&wrappedCameraSymbolicLink), &result));
        return winrt::VirtualCameraManager_WinRT::VirtualCameraProxy{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraRegistrarStatics<D>::RetakeExistingVirtualCamera(winrt::VirtualCameraManager_WinRT::VirtualCameraKind const& virtualCameraKind, winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime const& lifetime, winrt::VirtualCameraManager_WinRT::VirtualCameraAccess const& access, param::hstring const& friendlyName, param::hstring const& symbolicLink, param::hstring const& wrappedCameraSymbolicLink) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics)->RetakeExistingVirtualCamera(static_cast<int32_t>(virtualCameraKind), static_cast<int32_t>(lifetime), static_cast<int32_t>(access), *(void**)(&friendlyName), *(void**)(&symbolicLink), *(void**)(&wrappedCameraSymbolicLink), &result));
        return winrt::VirtualCameraManager_WinRT::VirtualCameraProxy{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_VirtualCameraManager_WinRT_IVirtualCameraRegistrarStatics<D>::GetExistingVirtualCameraDevices() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics)->GetExistingVirtualCameraDevices(&result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Enumeration::DeviceInformation>{ result, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload> : produce_base<D, winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload>
    {
        int32_t __stdcall get_ControlKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind>(this->shim().ControlKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry> : produce_base<D, winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry>
    {
    };
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics> : produce_base<D, winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics>
    {
        int32_t __stdcall GetSimpleCustomControl(int32_t customControlKind, void* controller, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload>(this->shim().GetSimpleCustomControl(*reinterpret_cast<winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const*>(&customControlKind), *reinterpret_cast<winrt::Windows::Media::Devices::VideoDeviceController const*>(&controller)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetSimpleCustomControlFlags(int32_t customControlKind, void* controller, uint32_t flags) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetSimpleCustomControlFlags(*reinterpret_cast<winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const*>(&customControlKind), *reinterpret_cast<winrt::Windows::Media::Devices::VideoDeviceController const*>(&controller), flags);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAugmentedMediaSourceCustomControl(int32_t controlKind, void* controller, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload>(this->shim().GetAugmentedMediaSourceCustomControl(*reinterpret_cast<winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const*>(&controlKind), *reinterpret_cast<winrt::Windows::Media::Devices::VideoDeviceController const*>(&controller)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetAugmentedMediaSourceCustomControlFlags(int32_t controlKind, void* controller, uint64_t flags) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAugmentedMediaSourceCustomControlFlags(*reinterpret_cast<winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const*>(&controlKind), *reinterpret_cast<winrt::Windows::Media::Devices::VideoDeviceController const*>(&controller), flags);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::IPropertyPayload> : produce_base<D, winrt::VirtualCameraManager_WinRT::IPropertyPayload>
    {
        int32_t __stdcall get_Capability(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Capability());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Flags(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Flags());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Size(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload> : produce_base<D, winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload>
    {
        int32_t __stdcall get_ControlKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind>(this->shim().ControlKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ColorMode(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().ColorMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy> : produce_base<D, winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy>
    {
        int32_t __stdcall EnableVirtualCamera() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EnableVirtualCamera();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DisableVirtualCamera() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisableVirtualCamera();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveVirtualCamera() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveVirtualCamera();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Access(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::VirtualCameraManager_WinRT::VirtualCameraAccess>(this->shim().Access());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FriendlyName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FriendlyName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WrappedCameraSymbolicLink(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().WrappedCameraSymbolicLink());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsKnownInstance(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsKnownInstance());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Lifetime(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime>(this->shim().Lifetime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SymbolicLink(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SymbolicLink());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_VirtualCameraKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::VirtualCameraManager_WinRT::VirtualCameraKind>(this->shim().VirtualCameraKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::IVirtualCameraProxyFactory> : produce_base<D, winrt::VirtualCameraManager_WinRT::IVirtualCameraProxyFactory>
    {
    };
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar> : produce_base<D, winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar>
    {
    };
    template <typename D>
    struct produce<D, winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics> : produce_base<D, winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics>
    {
        int32_t __stdcall RegisterNewVirtualCamera(int32_t virtualCameraKind, int32_t lifetime, int32_t access, void* friendlyName, void* wrappedCameraSymbolicLink, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::VirtualCameraManager_WinRT::VirtualCameraProxy>(this->shim().RegisterNewVirtualCamera(*reinterpret_cast<winrt::VirtualCameraManager_WinRT::VirtualCameraKind const*>(&virtualCameraKind), *reinterpret_cast<winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime const*>(&lifetime), *reinterpret_cast<winrt::VirtualCameraManager_WinRT::VirtualCameraAccess const*>(&access), *reinterpret_cast<hstring const*>(&friendlyName), *reinterpret_cast<hstring const*>(&wrappedCameraSymbolicLink)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RetakeExistingVirtualCamera(int32_t virtualCameraKind, int32_t lifetime, int32_t access, void* friendlyName, void* symbolicLink, void* wrappedCameraSymbolicLink, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::VirtualCameraManager_WinRT::VirtualCameraProxy>(this->shim().RetakeExistingVirtualCamera(*reinterpret_cast<winrt::VirtualCameraManager_WinRT::VirtualCameraKind const*>(&virtualCameraKind), *reinterpret_cast<winrt::VirtualCameraManager_WinRT::VirtualCameraLifetime const*>(&lifetime), *reinterpret_cast<winrt::VirtualCameraManager_WinRT::VirtualCameraAccess const*>(&access), *reinterpret_cast<hstring const*>(&friendlyName), *reinterpret_cast<hstring const*>(&symbolicLink), *reinterpret_cast<hstring const*>(&wrappedCameraSymbolicLink)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetExistingVirtualCameraDevices(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Enumeration::DeviceInformation>>(this->shim().GetExistingVirtualCameraDevices());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::VirtualCameraManager_WinRT
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::VirtualCameraManager_WinRT::IAugmentedMediaSourceCustomPropertyPayload> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiry> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::IPropertyPayload> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::ISimpleCustomPropertyPayload> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxy> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::IVirtualCameraProxyFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrar> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::IVirtualCameraRegistrarStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::BasicAugmentedMediaSourceCustomPropertyPayload> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::CustomCameraKsPropertyInquiry> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::SimpleCustomPropertyPayload> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::VirtualCameraProxy> : winrt::impl::hash_base {};
    template<> struct hash<winrt::VirtualCameraManager_WinRT::VirtualCameraRegistrar> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
