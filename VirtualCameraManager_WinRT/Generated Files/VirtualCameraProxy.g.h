// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220608.4

#pragma once
#include "winrt/VirtualCameraManager_WinRT.h"
namespace winrt::VirtualCameraManager_WinRT::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) VirtualCameraProxy_base : implements<D, VirtualCameraManager_WinRT::VirtualCameraProxy, I...>
    {
        using base_type = VirtualCameraProxy_base;
        using class_type = VirtualCameraManager_WinRT::VirtualCameraProxy;
        using implements_type = typename VirtualCameraProxy_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"VirtualCameraManager_WinRT.VirtualCameraProxy";
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_VIRTUALCAMERAPROXY_XAML_G_H) || __has_include("VirtualCameraProxy.xaml.g.h")

#include "VirtualCameraProxy.xaml.g.h"

#else

namespace winrt::VirtualCameraManager_WinRT::implementation
{
    template <typename D, typename... I>
    using VirtualCameraProxyT = VirtualCameraProxy_base<D, I...>;
}

#endif
