// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220608.4

#pragma once
#include "winrt/VirtualCameraManager_WinRT.h"
#include "winrt/Windows.Media.Devices.h"
namespace winrt::VirtualCameraManager_WinRT::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) CustomCameraKsPropertyInquiry_base : implements<D, VirtualCameraManager_WinRT::CustomCameraKsPropertyInquiry, I...>
    {
        using base_type = CustomCameraKsPropertyInquiry_base;
        using class_type = VirtualCameraManager_WinRT::CustomCameraKsPropertyInquiry;
        using implements_type = typename CustomCameraKsPropertyInquiry_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"VirtualCameraManager_WinRT.CustomCameraKsPropertyInquiry";
        }
    };
}
namespace winrt::VirtualCameraManager_WinRT::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) CustomCameraKsPropertyInquiryT : implements<D, winrt::Windows::Foundation::IActivationFactory, winrt::VirtualCameraManager_WinRT::ICustomCameraKsPropertyInquiryStatics, I...>
    {
        using instance_type = VirtualCameraManager_WinRT::CustomCameraKsPropertyInquiry;

        hstring GetRuntimeClassName() const
        {
            return L"VirtualCameraManager_WinRT.CustomCameraKsPropertyInquiry";
        }
        auto GetSimpleCustomControl(winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const& customControlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller)
        {
            return T::GetSimpleCustomControl(customControlKind, controller);
        }
        auto SetSimpleCustomControlFlags(winrt::VirtualCameraManager_WinRT::SimpleCustomControlKind const& customControlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller, uint32_t flags)
        {
            return T::SetSimpleCustomControlFlags(customControlKind, controller, flags);
        }
        auto GetAugmentedMediaSourceCustomControl(winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const& controlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller)
        {
            return T::GetAugmentedMediaSourceCustomControl(controlKind, controller);
        }
        auto SetAugmentedMediaSourceCustomControlFlags(winrt::VirtualCameraManager_WinRT::AugmentedMediaSourceCustomControlKind const& controlKind, winrt::Windows::Media::Devices::VideoDeviceController const& controller, uint64_t flags)
        {
            return T::SetAugmentedMediaSourceCustomControlFlags(controlKind, controller, flags);
        }
        [[noreturn]] winrt::Windows::Foundation::IInspectable ActivateInstance() const
        {
            throw hresult_not_implemented();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_CUSTOMCAMERAKSPROPERTYINQUIRY_XAML_G_H) || __has_include("CustomCameraKsPropertyInquiry.xaml.g.h")

#include "CustomCameraKsPropertyInquiry.xaml.g.h"

#else

namespace winrt::VirtualCameraManager_WinRT::implementation
{
    template <typename D, typename... I>
    using CustomCameraKsPropertyInquiryT = CustomCameraKsPropertyInquiry_base<D, I...>;
}

#endif
